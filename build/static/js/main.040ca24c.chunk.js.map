{"version":3,"sources":["components/CitiesContext/actions.ts","components/CitiesContext/reducer.ts","components/CitiesContext/CitiesContext.tsx","services/weatherService.ts","components/Card/Card.tsx","components/Card/CardContent.tsx","components/Card/CardHeader.tsx","components/CitiesContext/useDispatch.ts","components/CloseButton/CloseButton.tsx","components/CityForecast/CityForecast.tsx","components/CityList/CityList.tsx","assets/images/clouds.jpg","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["REMOVE_CITY","cityReducer","state","action","type","filter","city","payload","initialContextValue","cities","dispatch","undefined","CitiesContext","createContext","getInitialCities","storedCities","localStorage","getItem","JSON","parse","CitiesContextProvider","props","useReducer","Provider","value","children","weatherService","getWeather","fetch","then","res","json","apiResponse","location","lattitude","response","coord","lat","longitude","lon","country","sys","name","weather","main","description","icon","temperature","temp","feelsLike","feels_like","minTemperature","temp_min","maxTemperature","temp_max","pressure","humidity","Card","className","rest","clsx","CardContent","CardHeader","useDispatch","useContext","CloseButton","CityForecast","useState","forecast","setForecast","loadForecast","useEffect","interval","setInterval","clearInterval","onClick","removeCity","src","alt","CityList","map","App","backgroundImage","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.040ca24c.chunk.js","sourcesContent":["export const ADD_CITY = \"ADD_CITY\";\r\nexport const REMOVE_CITY = \"REMOVE_CITY\";\r\n\r\ntype AddCity = {\r\n    type: typeof ADD_CITY;\r\n    payload: string;\r\n}\r\n\r\ntype RemoveCity = {\r\n    type: typeof REMOVE_CITY;\r\n    payload: string;\r\n}\r\n\r\nexport type CityAction = AddCity | RemoveCity;\r\n\r\nexport const addCity = (city: string): CityAction => ({\r\n    type: ADD_CITY,\r\n    payload: city\r\n})\r\n\r\nexport const removeCity = (city: string): CityAction => ({\r\n    type: REMOVE_CITY,\r\n    payload: city\r\n})\r\n","import {CityAction, REMOVE_CITY } from \"./actions\";\r\n\r\nexport type CityState = string[];\r\n\r\nconst cityReducer = (state: CityState, action: CityAction): CityState => {\r\n    switch (action.type) {\r\n        case REMOVE_CITY:\r\n            return state.filter(city => city !== action.payload);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default cityReducer;","import React, { createContext, PropsWithChildren, useReducer } from 'react'\r\nimport {CityAction} from './actions';\r\nimport cityReducer from './reducer';\r\n\r\ntype CitiesContextValue = {\r\n    cities: string[];\r\n    dispatch: React.Dispatch<CityAction>;\r\n}\r\n\r\nconst initialContextValue: CitiesContextValue = {\r\n    cities: [],\r\n    dispatch: undefined!\r\n}\r\n\r\nconst CitiesContext = createContext(initialContextValue);\r\n\r\nconst getInitialCities = () => {\r\n    const storedCities = localStorage.getItem(\"cities\");\r\n\r\n    if(storedCities) {\r\n        return JSON.parse(storedCities) as string[];\r\n    } else return [\"adliswil\", \"zurich\", \"new york\", \"moscow\", \"bordeaux\", \"riga\"];\r\n} \r\n\r\nexport const CitiesContextProvider = (props: PropsWithChildren<{}>) => {\r\n    const [cities, dispatch] = useReducer(cityReducer, undefined, getInitialCities);\r\n\r\n    return (\r\n        <CitiesContext.Provider value={{cities, dispatch}}>\r\n            {props.children}\r\n        </CitiesContext.Provider>\r\n    )\r\n}\r\n\r\nexport default CitiesContext\r\n","const url = \"http://api.openweathermap.org/data/2.5/weather?appid=7e9fb89639a21a3dd453e08cb7379eec&units=metric\";\r\n\r\nexport type WeatherResponse = {\r\n    location: {\r\n        lattitude: number;\r\n        longitude: number;\r\n        country: string;\r\n        city: string;\r\n    },\r\n    weather: {\r\n        name: string;\r\n        description: string;\r\n        icon: string;\r\n        temperature: number;\r\n        feelsLike: number;\r\n        minTemperature: number;\r\n        maxTemperature: number;\r\n        pressure: number;\r\n        humidity: number;\r\n    }\r\n}\r\n\r\ntype ApiResponse = {\r\n    base: string;\r\n    clouds: {\r\n        all: number;\r\n    }\r\n    cod: number;\r\n    coord: {\r\n        lat: number;\r\n        lon: number;\r\n    }\r\n    dt: number;\r\n    id: number;\r\n    main: {\r\n        feels_like: number;\r\n        humidity: number;\r\n        pressure: number;\r\n        temp: number;\r\n        temp_max: number;\r\n        temp_min: number;\r\n    }\r\n    name: string;\r\n    sys: {\r\n        country: string;\r\n        id: number;\r\n        sunrise: number;\r\n        sunset: number;\r\n        type: 1;\r\n    }\r\n    timezone: number;\r\n    visibility: number;\r\n    weather: {\r\n        description: string;\r\n        icon: string;\r\n        id: number; \r\n        main: string;\r\n    }[]\r\n    wind: {\r\n        speed: number;\r\n        deg: number;\r\n    }\r\n}\r\n\r\nconst transformResponse = (response: ApiResponse): WeatherResponse => ({\r\n    location: {\r\n        lattitude: response.coord.lat,\r\n        longitude: response.coord.lon,\r\n        country: response.sys.country,\r\n        city: response.name\r\n    },\r\n    weather: {\r\n        name: response.weather[0].main,\r\n        description: response.weather[0].description,\r\n        icon: response.weather[0].icon,\r\n        temperature: response.main.temp,\r\n        feelsLike: response.main.feels_like,\r\n        minTemperature: response.main.temp_min,\r\n        maxTemperature: response.main.temp_max,\r\n        pressure: response.main.pressure,\r\n        humidity: response.main.humidity\r\n    }\r\n})\r\n\r\nconst getWeather = (city: string) => fetch(`${url}&q=${city}`).then(res => res.json()).then(apiResponse => transformResponse(apiResponse as ApiResponse));\r\n\r\nconst weatherService = {\r\n    getWeather\r\n}\r\n\r\nexport default weatherService;","import clsx from 'clsx';\r\nimport React from 'react'\r\nimport \"./Card.css\";\r\n\r\nexport type CardProps = React.HtmlHTMLAttributes<HTMLDivElement>\r\n\r\nconst Card = (props: CardProps) => {\r\n    const {children, className, ...rest} = props;\r\n\r\n    return (\r\n        <div className={clsx(\"Card-root\", className)} {...rest}>\r\n           {children} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import clsx from 'clsx';\r\nimport React from 'react'\r\n\r\nexport type CardContentProps = React.HtmlHTMLAttributes<HTMLDivElement>;\r\n\r\nconst CardContent = (props: CardContentProps) => {\r\n\r\n    const {children, className, ...rest} = props;\r\n\r\n    return (\r\n        <div className={clsx(\"CardContent-root\", className)} {...rest}>\r\n           {children} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardContent\r\n","import clsx from 'clsx';\r\nimport React, { ReactNode } from 'react'\r\n\r\nexport type CardHeaderProps = Omit<React.HtmlHTMLAttributes<HTMLDivElement>, \"title\"> & {\r\n    children: ReactNode;\r\n    action?: ReactNode;\r\n};\r\n\r\nconst CardHeader = (props: CardHeaderProps) => {\r\n\r\n    const {className, children, action, ...rest} = props;\r\n\r\n    return (\r\n        <div className={clsx(\"CardHeader-root\", className)} {...rest}>\r\n            <div className=\"CardHeader-title\">\r\n                {children}\r\n            </div>\r\n            {action}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardHeader\r\n","import { useContext } from \"react\";\r\nimport CitiesContext from \"./CitiesContext\";\r\n\r\nconst useDispatch = () => useContext(CitiesContext).dispatch;\r\n\r\nexport default useDispatch;","import clsx from 'clsx';\r\nimport React from 'react'\r\nimport \"./CloseButton.css\"\r\n\r\nexport type CloseButtonProps = Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, \"children\">\r\n\r\nconst CloseButton = (props: CloseButtonProps) => {\r\n\r\n    const {className, ...rest} = props;\r\n\r\n    return (\r\n        <button className={clsx(\"CloseButton-root\", className)} {...rest}>\r\n           &times; \r\n        </button>\r\n    )\r\n}\r\n\r\nexport default CloseButton\r\n","import React, { useEffect, useState } from \"react\";\r\nimport weatherService, { WeatherResponse } from \"../../services/weatherService\";\r\nimport Card from \"../Card/Card\";\r\nimport CardContent from \"../Card/CardContent\";\r\nimport CardHeader from \"../Card/CardHeader\";\r\nimport { removeCity } from \"../CitiesContext/actions\";\r\nimport useDispatch from \"../CitiesContext/useDispatch\";\r\nimport CloseButton from \"../CloseButton/CloseButton\";\r\nimport \"./CityForecast.css\";\r\n\r\ntype CityForeCaseProps = {\r\n    city: string;\r\n};\r\n\r\nconst CityForecast = (props: CityForeCaseProps) => {\r\n    const { city } = props;\r\n    const [forecast, setForecast] = useState<WeatherResponse | null>(null);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleRemove = () => {\r\n        dispatch(removeCity(city));\r\n    };\r\n\r\n    const loadForecast = () => {\r\n        weatherService.getWeather(city).then((res) => {\r\n            setForecast(res);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadForecast();\r\n\r\n        const interval = setInterval(() => {\r\n            loadForecast();\r\n        }, 60_000);\r\n\r\n        return () => {\r\n            clearInterval(interval);\r\n        };\r\n        // eslint-disable-next-line\r\n    }, [city]);\r\n\r\n    return (\r\n        <Card className=\"CityForecast-root\">\r\n            <CardHeader action={<CloseButton onClick={handleRemove} />}>\r\n                <h5>\r\n                    {forecast ? `${forecast.location.city}, ${forecast.location.country}` : city}\r\n                </h5>\r\n                {forecast && (\r\n                <img className=\"CityForecast-icon\" src={`http://openweathermap.org/img/wn/${forecast?.weather.icon}@2x.png`} alt={forecast.weather.description} />\r\n                )}\r\n            </CardHeader>\r\n            <CardContent className=\"CityForecast-content\">\r\n                {forecast ? (\r\n                    <div className=\"CityForecast-container\">\r\n                        <div className=\"CityForecast-grid\">\r\n                            <p>Current:</p>\r\n                            <p>{forecast.weather.temperature} &deg; C</p>\r\n                            <p>Feels like:</p>\r\n                            <p>{forecast.weather.feelsLike} &deg; C</p>\r\n                            <p>Minimum:</p>\r\n                            <p>{forecast.weather.minTemperature} &deg; C</p>\r\n                            <p>Maximum:</p>\r\n                            <p>{forecast.weather.maxTemperature} &deg; C</p>\r\n                        </div>\r\n                    </div>\r\n                ): (\r\n                    <h6>Loading...</h6>\r\n                )}\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default CityForecast;\r\n","import React, { useContext } from \"react\";\r\nimport CitiesContext from \"../CitiesContext/CitiesContext\";\r\nimport CityForecast from \"../CityForecast/CityForecast\";\r\nimport \"./CityList.css\";\r\n\r\nconst CityList = () => {\r\n    const { cities } = useContext(CitiesContext);\r\n\r\n    return (\r\n        <section className=\"CityList\">\r\n            <div className=\"container\">\r\n                <div className=\"list\">\r\n                    {cities.map((city) => (\r\n                        <div className=\"item\" key={city}>\r\n                            <CityForecast city={city} />\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default CityList;\r\n","export default __webpack_public_path__ + \"static/media/clouds.e2217daa.jpg\";","import React from \"react\";\r\nimport { CitiesContextProvider } from \"../CitiesContext/CitiesContext\";\r\nimport CityList from \"../CityList/CityList\";\r\nimport \"./App.css\";\r\nimport backgroundImage from \"../../assets/images/clouds.jpg\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"App\">\r\n            <img className=\"background-image\" alt=\"background\" src={backgroundImage} />\r\n            <CitiesContextProvider>\r\n                <CityList />\r\n            </CitiesContextProvider>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/App/App\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}